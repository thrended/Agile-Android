package com.example.agileandroidalpha.feature_board.presentation.chat

import com.example.agileandroidalpha.firebase.firestore.PrivateMessage
import com.example.agileandroidalpha.firebase.firestore.model.ChatMessage
import com.example.agileandroidalpha.firebase.firestore.model.FireUser
import java.time.LocalDateTime

sealed class ChatEvent {
    data class Ban(val user: FireUser): ChatEvent()
    data class BlockUser(val user: FireUser): ChatEvent()
    data class ChangeChatRoom(val no: Int): ChatEvent()
    data class ChangeMsgText(val str: String): ChatEvent()
    data class ChangePrivateMsgUser(val ur: FireUser?): ChatEvent()
    data class DeleteMsg(val msg: ChatMessage): ChatEvent()
    data class DeleteMsgPerm(val msg: ChatMessage): ChatEvent()
    data class DemoteMessage(val msg: ChatMessage): ChatEvent()
    data class DemoteUser(val ur: FireUser): ChatEvent()
    data class DisableUser(val ur: FireUser, val set: Boolean): ChatEvent()
    data class EditMsg(val msg: ChatMessage, val newText: String): ChatEvent()
    data class EditTxt(val str: String): ChatEvent()
    data class FlagMsg(val msg: ChatMessage): ChatEvent()
    data class GetProfile(val uid: String): ChatEvent()
    data class HideMsg(val msg: ChatMessage): ChatEvent()
    data class HooMkAnnouncement(val msg: ChatMessage): ChatEvent()
    data class MoveMsg(val msg: ChatMessage): ChatEvent()
    data class Mute(val user: FireUser, val bool: Boolean): ChatEvent()
    data class PinMsg(val msg: ChatMessage): ChatEvent()
    data class PromoteMessage(val msg: ChatMessage, val timer: Long? = null): ChatEvent()
    data class PromoteUser(val ur: FireUser): ChatEvent()
    data class Purge(val uid: String?): ChatEvent()
    data class Reply(val msg: ChatMessage, val replyTo: ChatMessage): ChatEvent()
    data class ReportMsg(val msg: ChatMessage, val warn: FireUser, val bool: Boolean): ChatEvent()
    data class RestrictUser(val msg: ChatMessage, val user: FireUser, val bool: Boolean): ChatEvent()
    data class RestoreMsg(val msg: ChatMessage): ChatEvent()
    data class SelfDemote(val ur: FireUser): ChatEvent()
    data class SelfPromote(val ur: FireUser): ChatEvent()
    data class SendMsg(val msg: String, val sig: String = ""): ChatEvent()
    data class SendMsgLater(val msg: String, val time: LocalDateTime, val sig: String = ""): ChatEvent()
    data class SendMsgSecret(val msg: String, val alias: String): ChatEvent()
    data class SendPM(val msg: PrivateMessage, val ur: FireUser?, val secret: Boolean = false): ChatEvent()
    data class SendScheduledMsg(val msg: ChatMessage): ChatEvent()
    data class SilenceRoom(val room: Int, val bool: Boolean): ChatEvent()
    data class SilenceUser(val user: FireUser, val bool: Boolean): ChatEvent()
    data class StartReply(val message: ChatMessage, val replyTo: FireUser?): ChatEvent()
    data class Unban(val user: FireUser): ChatEvent()
    data class UnblockUser(val user: FireUser): ChatEvent()
    data class UnFlagMsg(val msg: ChatMessage): ChatEvent()
    data class UnHideMsg(val msg: ChatMessage): ChatEvent()
    data class UnpinMsg(val msg: ChatMessage): ChatEvent()
    data class Warn(val msg: ChatMessage, val warn: FireUser, val bool: Boolean): ChatEvent()
    object DeleteAllMarked: ChatEvent()
    object UndoDelete: ChatEvent()
    object UndoDeleteAll: ChatEvent()
}
